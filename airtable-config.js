// üõ°Ô∏è Configuraci√≥n COMPLETA de Airtable API - Con detecci√≥n autom√°tica mejorada
// airtable-config.js - Versi√≥n con detecci√≥n robusta e indicadores avanzados

console.log('üöÄ Cargando airtable-config.js (VERSI√ìN MEJORADA CON INDICADORES AVANZADOS)...');

// üó∫Ô∏è MAPEO DE VALORES CORREGIDO PARA COMPATIBILIDAD CON AIRTABLE
const AIRTABLE_VALUE_MAPPING = {
    // Para campos de selecci√≥n en Airtable se utilizan c√≥digos internos como valores. Aqu√≠ se
    // incluyen las variantes de nombres visibles para asegurar que se mapeen al c√≥digo correcto.
    servicioIngenieria: {
        // Ingenier√≠a Biom√©dica
        'INGENIERIA_BIOMEDICA': 'INGENIERIA_BIOMEDICA',
        'Ingenier√≠a Biom√©dica': 'INGENIERIA_BIOMEDICA',
        'Ingenieria Biomedica': 'INGENIERIA_BIOMEDICA',
        'Ing. Biom√©dica': 'INGENIERIA_BIOMEDICA',
        'BIOMEDICA': 'INGENIERIA_BIOMEDICA',
        // Mec√°nica
        'MECANICA': 'MECANICA',
        'Mec√°nica': 'MECANICA',
        'Mecanica': 'MECANICA',
        // Infraestructura
        'INFRAESTRUCTURA': 'INFRAESTRUCTURA',
        'Infraestructura': 'INFRAESTRUCTURA'
    },
    tipoServicio: {
        'MANTENIMIENTO_PREVENTIVO': 'MANTENIMIENTO_PREVENTIVO',
        'Mantenimiento Preventivo': 'MANTENIMIENTO_PREVENTIVO',
        'MANTENIMIENTO_CORRECTIVO': 'MANTENIMIENTO_CORRECTIVO',
        'Mantenimiento Correctivo': 'MANTENIMIENTO_CORRECTIVO',
        'REPARACION': 'REPARACION',
        'Reparaci√≥n': 'REPARACION',
        'INSTALACION': 'INSTALACION',
        'Instalaci√≥n': 'INSTALACION',
        'DESINSTALACION': 'DESINSTALACION',
        'Desinstalaci√≥n': 'DESINSTALACION',
        'CALIBRACION': 'CALIBRACION',
        'Calibraci√≥n': 'CALIBRACION',
        'INSPECCION': 'INSPECCION',
        'Inspecci√≥n': 'INSPECCION',
        'ACTUALIZACION': 'ACTUALIZACION',
        'Actualizaci√≥n': 'ACTUALIZACION',
        'EMERGENCIA': 'EMERGENCIA',
        'Emergencia': 'EMERGENCIA',
        'ERROR_USUARIO': 'ERROR_USUARIO',
        'Error de Usuario': 'ERROR_USUARIO'
    },
    prioridad: {
        'CRITICA': 'CRITICA',
        'Cr√≠tica': 'CRITICA',
        'ALTA': 'ALTA',
        'Alta': 'ALTA',
        'MEDIA': 'MEDIA',
        'Media': 'MEDIA',
        'BAJA': 'BAJA',
        'Baja': 'BAJA'
    },
    estado: {
        'PENDIENTE': 'PENDIENTE',
        'Pendiente': 'PENDIENTE',
        'ASIGNADA': 'ASIGNADA',
        'Asignada': 'ASIGNADA',
        'EN_PROCESO': 'EN_PROCESO',
        'En Proceso': 'EN_PROCESO',
        'EN PROCESO': 'EN_PROCESO',
        'COMPLETADA': 'COMPLETADA',
        'Completada': 'COMPLETADA',
        'CANCELADA': 'CANCELADA',
        'Cancelada': 'CANCELADA'
    },
    area: {
        // Igual que servicioIngenieria, pero sin tilde en "Ing."
        'INGENIERIA_BIOMEDICA': 'INGENIERIA_BIOMEDICA',
        'Ingenier√≠a Biom√©dica': 'INGENIERIA_BIOMEDICA',
        'Ingenieria Biomedica': 'INGENIERIA_BIOMEDICA',
        'Ing. Biom√©dica': 'INGENIERIA_BIOMEDICA',
        'BIOMEDICA': 'INGENIERIA_BIOMEDICA',
        'MECANICA': 'MECANICA',
        'Mec√°nica': 'MECANICA',
        'Mecanica': 'MECANICA',
        'INFRAESTRUCTURA': 'INFRAESTRUCTURA',
        'Infraestructura': 'INFRAESTRUCTURA'
    },



// üîÑ M√âTODO MODIFICADO: Actualizar estado SIN liberar t√©cnico cuando se completa
async updateRequestStatusWithoutRelease(solicitudId, nuevoEstado, observaciones = '') {
    console.log('üîÑ Actualizando estado de solicitud (sin liberar t√©cnico):', { solicitudId, nuevoEstado });
    
    try {
        // Obtener la solicitud actual para validar
        const solicitudes = await this.getSolicitudes();
        const solicitud = solicitudes.find(s => s.id === solicitudId);
        
        if (!solicitud) {
            throw new Error('Solicitud no encontrada');
        }
        
        console.log('üìã Estado actual:', solicitud.estado);
        console.log('üîÑ Nuevo estado solicitado:', nuevoEstado);
        
        // Mapear el nuevo estado
        const estadoMapeado = this.mapFieldValue('estado', nuevoEstado);
        console.log('üó∫Ô∏è Estado mapeado:', estadoMapeado);
        
        // Preparar campos a actualizar
        const updateData = {
            estado: estadoMapeado
        };
        
        // Agregar observaciones si se proporcionan
        if (observaciones) {
            updateData.observaciones = (solicitud.observaciones || '') + '\n[' + new Date().toLocaleString('es-CO') + '] ' + observaciones;
        }
        
        // L√≥gica espec√≠fica seg√∫n el estado
        if (nuevoEstado === 'EN_PROCESO' || nuevoEstado === 'EN PROCESO') {
            updateData.fechaInicioTrabajo = new Date().toISOString();
            console.log('üìÖ Registrando fecha de inicio de trabajo');
            
        } else if (nuevoEstado === 'COMPLETADA') {
            const fechaCompletado = new Date();
            updateData.fechaCompletado = fechaCompletado.toISOString();
            
            // Calcular tiempo total de respuesta
            if (solicitud.fechaCreacion) {
                const fechaCreacion = new Date(solicitud.fechaCreacion);
                const tiempoTotalMs = fechaCompletado - fechaCreacion;
                const horas = Math.floor(tiempoTotalMs / (1000 * 60 * 60));
                const minutos = Math.floor((tiempoTotalMs % (1000 * 60 * 60)) / (1000 * 60));
                updateData.tiempoTotalRespuesta = `${horas}h ${minutos}m`;
                
                console.log('‚è±Ô∏è Tiempo total calculado:', updateData.tiempoTotalRespuesta);
            }
            
            // IMPORTANTE: NO liberar el t√©cnico - mantener el tecnicoAsignado
            console.log('‚úÖ Manteniendo t√©cnico asignado:', solicitud.tecnicoAsignado);
        }
        
        console.log('üìù Datos a actualizar:', updateData);
        
        // Realizar la actualizaci√≥n
        const result = await this.makeRequest(`${this.tables.solicitudes}/${solicitudId}`, 'PATCH', {
            fields: updateData
        });
        
        console.log('‚úÖ Estado actualizado exitosamente');
        
        // IMPORTANTE: Si se complet√≥, NO liberar el t√©cnico pero s√≠ actualizar su estado a disponible
        if (nuevoEstado === 'COMPLETADA' && solicitud.tecnicoAsignado) {
            console.log('üìã Solicitud completada - T√©cnico permanece registrado como quien la complet√≥');
            
            // Buscar el t√©cnico y marcarlo como disponible
            const tecnicos = await this.getTecnicos();
            const tecnico = tecnicos.find(t => t.nombre === solicitud.tecnicoAsignado);
            
            if (tecnico) {
                try {
                    await this.makeRequest(`${this.tables.tecnicos}/${tecnico.id}`, 'PATCH', {
                        fields: {
                            estado: 'disponible',
                            solicitudAsignada: ''
                        }
                    });
                    console.log(`‚úÖ T√©cnico ${tecnico.nombre} marcado como disponible pero permanece en la solicitud completada`);
                } catch (err) {
                    console.warn('‚ö†Ô∏è No se pudo actualizar el estado del t√©cnico:', err);
                }
            }
        }
        
        return { 
            success: true, 
            solicitud: { ...solicitud, ...updateData },
            mensaje: `Estado cambiado a ${nuevoEstado}. ${nuevoEstado === 'COMPLETADA' ? 'El t√©cnico permanece registrado.' : ''}`
        };
        
    } catch (error) {
        console.error('‚ùå Error en updateRequestStatusWithoutRelease:', error);
        throw new Error(`Error actualizando estado: ${error.message}`);
    }
}
    // Para estados de acceso y usuario se mantienen las etiquetas originales
    estadoSolicitudAcceso: {
        'PENDIENTE': 'Pendiente',
        'APROBADA': 'Aprobada',
        'RECHAZADA': 'Rechazada'
    },
    estadoUsuario: {
        'ACTIVO': 'Activo',
        'INACTIVO': 'Inactivo',
        'SUSPENDIDO': 'Suspendido'
    }
};

// üìã Campos seguros confirmados para cada tabla
const SAFE_FIELDS = {
    solicitudes: [
        'numero',
        'descripcion', 
        'estado',
        'fechaCreacion',
        'servicioIngenieria',
        'tipoServicio',
        'prioridad',
        'equipo',
        'ubicacion',
        'observaciones',
        'solicitante',
        'servicioHospitalario',
        'emailSolicitante',
        'tecnicoAsignado',
        'fechaAsignacion',
        'observacionesAsignacion',
        'tiempoRespuestaMaximo',
        'fechaInicioTrabajo',
        'fechaCompletado',
        'tiempoTotalRespuesta'
    ],
    tecnicos: [
        'nombre',
        'email',
        'area',
        'tipo',
        'especialidad',
        'estado',
        'fechaCreacion',
        'solicitudAsignada'
    ],
    solicitudesAcceso: [
        'nombreCompleto',
        'email',
        'telefono',
        'servicioHospitalario',
        'cargo',
        'justificacion',
        'fechaSolicitud',
        'estado',
        'esUrgente',
        'usuarioCreado'
    ],
    usuarios: [
        'nombreCompleto',
        'email',
        'servicioHospitalario',
        'cargo',
        'codigoAcceso',
        'estado',
        'fechaCreacion',
        'solicitudOrigenId'
    ]
};

class AirtableAPI {
    constructor() {
        console.log('üîß Inicializando AirtableAPI con detecci√≥n robusta e indicadores avanzados...');
        
        this.hostname = window.location.hostname;
        this.isLocalDevelopment = this.hostname === 'localhost' || 
                                 this.hostname === '127.0.0.1' ||
                                 this.hostname.startsWith('localhost:') ||
                                 this.hostname.startsWith('127.0.0.1:');
        
        console.log('üîç Hostname:', this.hostname);
        console.log('üè† Es desarrollo local:', this.isLocalDevelopment);
        
        if (this.isLocalDevelopment) {
            this.useProxy = false;
            this.baseUrl = 'https://api.airtable.com/v0/appFyEBCedQGOeJyV';
            this.directApiKey = 'patev8QTzDMA5EGSK.777efed543e6fac49d2c830659a6d0c508b617ff90c352921d626fd9c929e570';
            console.log('üîß MODO DESARROLLO: Conexi√≥n directa');
        } else {
            this.useProxy = true;
            this.baseUrl = '/.netlify/functions/airtable-proxy';
            this.directApiKey = null;
            console.log('üõ°Ô∏è MODO PRODUCCI√ìN: Usando proxy Netlify');
        }
        
        // üìã Tablas confirmadas
        this.tables = {
            solicitudes: 'Solicitudes',
            tecnicos: 'Tecnicos', 
            usuarios: 'Usuarios',
            solicitudesAcceso: 'SolicitudesAcceso'
        };

        // üó∫Ô∏è Mapeo de valores actualizado
        this.fieldMappings = AIRTABLE_VALUE_MAPPING;

        // üî¢ CONTADORES PARA NUMERACI√ìN ESPEC√çFICA
        this.areaCounters = {
            'INGENIERIA_BIOMEDICA': 0,
            'MECANICA': 0,
            'INFRAESTRUCTURA': 0
        };

        // üéØ PREFIJOS POR √ÅREA
        this.areaPrefixes = {
            'INGENIERIA_BIOMEDICA': 'SOLBIO',
            'MECANICA': 'SOLMEC',
            'INFRAESTRUCTURA': 'SOLINFRA'
        };
        
        this.connectionStatus = 'connecting';
        
        // Almacenar valores v√°lidos detectados para solicitudes de acceso
        this.validAccessRequestValues = {
            estado: null,
            servicioHospitalario: [],
            cargo: [],
            availableFields: []
        };
        
        // Almacenar valores v√°lidos detectados para usuarios
        this.validUserValues = {
            estado: null,
            servicioHospitalario: [],
            cargo: []
        };
        
        // IMPORTANTE: Inicializar con valores conocidos que funcionan
        // Inicializar valores v√°lidos de solicitud utilizando los c√≥digos internos en lugar de
        // las etiquetas amigables. Esto evita que se intenten crear nuevas opciones en Airtable.
        this.validSolicitudValues = {
            servicioIngenieria: ['INGENIERIA_BIOMEDICA', 'MECANICA', 'INFRAESTRUCTURA'],
            tipoServicio: ['MANTENIMIENTO_PREVENTIVO', 'MANTENIMIENTO_CORRECTIVO', 'REPARACION', 'INSTALACION', 'DESINSTALACION', 'CALIBRACION', 'INSPECCION', 'ACTUALIZACION', 'EMERGENCIA', 'ERROR_USUARIO'],
            prioridad: ['CRITICA', 'ALTA', 'MEDIA', 'BAJA'],
            estado: ['PENDIENTE', 'ASIGNADA', 'EN_PROCESO', 'COMPLETADA', 'CANCELADA'],
            availableFields: []
        };
        
        console.log('üì° URL base:', this.baseUrl);
        console.log('üõ°Ô∏è Usando proxy:', this.useProxy);
        console.log('‚úÖ Tablas configuradas:', Object.keys(this.tables));
        console.log('üó∫Ô∏è Mapeo de valores configurado');
        console.log('üìã Valores iniciales de solicitud:', this.validSolicitudValues);
        console.log('‚ú® NUEVO: Tipo de servicio DESINSTALACION agregado');
        
        this.initializeConnectionAsync();
    }

    // üîß FUNCI√ìN CR√çTICA: Limpiar valores de comillas extras y espacios
    cleanFieldValue(value) {
        if (typeof value !== 'string') return value;
        
        // Remover comillas dobles extras al principio y final
        let cleanValue = value.trim();
        
        // Remover m√∫ltiples comillas dobles consecutivas
        cleanValue = cleanValue.replace(/"+/g, '"');
        
        // Si el valor empieza y termina con comillas, removerlas
        if (cleanValue.startsWith('"') && cleanValue.endsWith('"')) {
            cleanValue = cleanValue.slice(1, -1);
        }
        
        // Remover comillas dobles escapadas
        cleanValue = cleanValue.replace(/\\"/g, '');
        
        // Si a√∫n tiene comillas dobles al principio y final, removerlas otra vez
        if (cleanValue.startsWith('"') && cleanValue.endsWith('"')) {
            cleanValue = cleanValue.slice(1, -1);
        }
        
        // Limpiar espacios extras
        cleanValue = cleanValue.trim();
        
        console.log(`üßπ Limpieza de valor: "${value}" ‚Üí "${cleanValue}"`);
        
        return cleanValue;
    }

    async initializeConnectionAsync() {
        setTimeout(async () => {
            try {
                const isConnected = await this.testConnection();
                
                if (isConnected) {
                    this.connectionStatus = 'connected';
                    this.notifyConnectionStatus(true);
                    console.log('‚úÖ Conectado exitosamente a Airtable');
                    
                    // CR√çTICO: Detectar valores v√°lidos para todas las tablas
                    await this.detectValidAccessRequestValues();
                    await this.detectValidUserValues();
                    
                    // IMPORTANTE: Siempre intentar detectar valores de solicitudes
                    try {
                        await this.detectValidSolicitudValues();
                    } catch (error) {
                        console.warn('‚ö†Ô∏è No se pudieron detectar valores de solicitudes, usando valores por defecto conocidos');
                        // Los valores por defecto ya est√°n establecidos en el constructor
                    }
                } else {
                    this.connectionStatus = 'disconnected';
                    this.notifyConnectionStatus(false);
                    console.warn('‚ö†Ô∏è Modo localStorage activo');
                }
            } catch (error) {
                console.error('‚ùå Error en inicializaci√≥n:', error);
                this.connectionStatus = 'disconnected';
                this.notifyConnectionStatus(false);
            }
        }, 2000);
    }

    // üîç FUNCI√ìN: Detectar valores v√°lidos espec√≠ficamente para solicitudes de acceso
    async detectValidAccessRequestValues() {
        console.log('üîç Detectando valores y campos v√°lidos para SolicitudesAcceso...');
        
        try {
            const result = await this.makeRequest(`${this.tables.solicitudesAcceso}?maxRecords=20`);
            
            if (result.records && result.records.length > 0) {
                // Detectar valores √∫nicos de estado
                const estadoValues = new Set();
                const servicioValues = new Set();
                const cargoValues = new Set();
                const availableFields = new Set();
                
                result.records.forEach(record => {
                    if (record.fields) {
                        // Recopilar todos los campos disponibles
                        Object.keys(record.fields).forEach(field => {
                            availableFields.add(field);
                        });
                        
                        if (record.fields.estado) {
                            estadoValues.add(record.fields.estado);
                        }
                        if (record.fields.servicioHospitalario) {
                            servicioValues.add(record.fields.servicioHospitalario);
                        }
                        if (record.fields.cargo) {
                            cargoValues.add(record.fields.cargo);
                        }
                    }
                });
                
                console.log('üìã Campos disponibles en SolicitudesAcceso:', Array.from(availableFields));
                
                // Buscar el valor correcto para PENDIENTE
                let pendienteValue = null;
                estadoValues.forEach(value => {
                    const cleanValue = this.cleanFieldValue(value);
                    if (cleanValue.toUpperCase() === 'PENDIENTE') {
                        pendienteValue = value;
                        console.log(`‚úÖ Valor PENDIENTE detectado: "${value}"`);
                    }
                });
                
                this.validAccessRequestValues = {
                    estado: pendienteValue,
                    estadoValues: Array.from(estadoValues),
                    servicioHospitalario: Array.from(servicioValues),
                    cargo: Array.from(cargoValues),
                    availableFields: Array.from(availableFields)
                };
                
                console.log('üìã Valores v√°lidos detectados:', {
                    estado: this.validAccessRequestValues.estado,
                    todosEstados: this.validAccessRequestValues.estadoValues,
                    camposDisponibles: this.validAccessRequestValues.availableFields,
                    servicios: this.validAccessRequestValues.servicioHospitalario.length,
                    cargos: this.validAccessRequestValues.cargo.length
                });
                
                // Si no encontramos PENDIENTE, usar valor por defecto
                if (!pendienteValue) {
                    console.warn('‚ö†Ô∏è No se encontr√≥ valor PENDIENTE, usando valor por defecto');
                    this.validAccessRequestValues.estado = 'Pendiente';
                }
                
            } else {
                console.warn('‚ö†Ô∏è No hay registros en SolicitudesAcceso para detectar valores');
                // Usar valores por defecto
                this.validAccessRequestValues.estado = 'Pendiente';
            }
            
        } catch (error) {
            console.error('‚ùå Error detectando valores v√°lidos:', error);
            // Usar valores por defecto en caso de error
            this.validAccessRequestValues.estado = 'Pendiente';
        }
    }

    // üîç NUEVO: Detectar valores v√°lidos para tabla de usuarios
    async detectValidUserValues() {
        console.log('üîç Detectando valores v√°lidos para tabla Usuarios...');
        
        try {
            const result = await this.makeRequest(`${this.tables.usuarios}?maxRecords=10`);
            
            if (result.records && result.records.length > 0) {
                const estadoValues = new Set();
                const servicioValues = new Set();
                const cargoValues = new Set();
                
                result.records.forEach(record => {
                    if (record.fields) {
                        if (record.fields.estado) {
                            estadoValues.add(record.fields.estado);
                        }
                        if (record.fields.servicioHospitalario) {
                            servicioValues.add(record.fields.servicioHospitalario);
                        }
                        if (record.fields.cargo) {
                            cargoValues.add(record.fields.cargo);
                        }
                    }
                });
                
                // Buscar el valor correcto para ACTIVO
                let activoValue = null;
                estadoValues.forEach(value => {
                    const cleanValue = this.cleanFieldValue(value);
                    if (cleanValue.toUpperCase() === 'ACTIVO') {
                        activoValue = value;
                        console.log(`‚úÖ Valor ACTIVO detectado para usuarios: "${value}"`);
                    }
                });
                
                // Si no encontramos ACTIVO, usar valor por defecto
                if (!activoValue && estadoValues.size > 0) {
                    activoValue = Array.from(estadoValues)[0];
                    console.warn(`‚ö†Ô∏è No se encontr√≥ valor ACTIVO, usando: "${activoValue}"`);
                } else if (!activoValue) {
                    activoValue = 'Activo';
                }
                
                this.validUserValues = {
                    estado: activoValue,
                    estadoValues: Array.from(estadoValues),
                    servicioHospitalario: Array.from(servicioValues),
                    cargo: Array.from(cargoValues)
                };
                
                console.log('üìã Valores v√°lidos de usuarios detectados:', {
                    estado: this.validUserValues.estado,
                    todosEstados: this.validUserValues.estadoValues,
                    servicios: this.validUserValues.servicioHospitalario.length,
                    cargos: this.validUserValues.cargo.length
                });
                
            } else {
                console.warn('‚ö†Ô∏è No hay usuarios para detectar valores, usando valores por defecto');
                // Usar valores por defecto
                this.validUserValues.estado = 'Activo';
            }
            
        } catch (error) {
            console.error('‚ùå Error detectando valores v√°lidos de usuarios:', error);
            // Usar valores por defecto en caso de error
            this.validUserValues.estado = 'Activo';
        }
    }

    // üîç MEJORADO: Detectar valores v√°lidos para tabla de Solicitudes
    async detectValidSolicitudValues() {
        console.log('üîç Detectando valores v√°lidos para tabla Solicitudes...');
        
        try {
            const result = await this.makeRequest(`${this.tables.solicitudes}?maxRecords=50`);
            
            if (result.records && result.records.length > 0) {
                const servicioValues = new Set();
                const tipoServicioValues = new Set();
                const prioridadValues = new Set();
                const estadoValues = new Set();
                const availableFields = new Set();
                
                result.records.forEach(record => {
                    if (record.fields) {
                        // Recopilar todos los campos disponibles
                        Object.keys(record.fields).forEach(field => {
                            availableFields.add(field);
                        });
                        
                        if (record.fields.servicioIngenieria) {
                            // Mapear el valor detectado al c√≥digo interno para evitar nombres amigables
                            const mappedServicio = this.mapFieldValue('servicioIngenieria', record.fields.servicioIngenieria);
                            servicioValues.add(mappedServicio);
                            console.log(`üìã √Årea detectada: "${record.fields.servicioIngenieria}" ‚Üí "${mappedServicio}"`);
                        }
                        if (record.fields.tipoServicio) {
                            const mappedTipo = this.mapFieldValue('tipoServicio', record.fields.tipoServicio);
                            tipoServicioValues.add(mappedTipo);
                        }
                        if (record.fields.prioridad) {
                            const mappedPrioridad = this.mapFieldValue('prioridad', record.fields.prioridad);
                            prioridadValues.add(mappedPrioridad);
                        }
                        if (record.fields.estado) {
                            const mappedEstado = this.mapFieldValue('estado', record.fields.estado);
                            estadoValues.add(mappedEstado);
                        }
                    }
                });
                
                // Si encontramos valores, usarlos
                if (servicioValues.size > 0) {
                    this.validSolicitudValues.servicioIngenieria = Array.from(servicioValues);
                }
                if (tipoServicioValues.size > 0) {
                    // Asegurar que DESINSTALACION est√© incluido si no fue detectado
                    const tiposDetectados = Array.from(tipoServicioValues);
                    if (!tiposDetectados.includes('DESINSTALACION')) {
                        tiposDetectados.push('DESINSTALACION');
                        console.log('‚ú® Agregando DESINSTALACION a tipos v√°lidos');
                    }
                    this.validSolicitudValues.tipoServicio = tiposDetectados;
                }
                if (prioridadValues.size > 0) {
                    this.validSolicitudValues.prioridad = Array.from(prioridadValues);
                }
                if (estadoValues.size > 0) {
                    this.validSolicitudValues.estado = Array.from(estadoValues);
                }
                
                this.validSolicitudValues.availableFields = Array.from(availableFields);
                
                console.log('üìã Valores v√°lidos de solicitudes detectados:', {
                    servicios: this.validSolicitudValues.servicioIngenieria,
                    tipos: this.validSolicitudValues.tipoServicio,
                    prioridades: this.validSolicitudValues.prioridad,
                    estados: this.validSolicitudValues.estado,
                    campos: this.validSolicitudValues.availableFields
                });
                
            } else {
                console.warn('‚ö†Ô∏è No hay registros en Solicitudes para detectar valores');
                console.log('üìã Usando valores conocidos por defecto:', this.validSolicitudValues);
            }
            
        } catch (error) {
            console.error('‚ùå Error detectando valores v√°lidos de solicitudes:', error);
            console.log('üìã Manteniendo valores por defecto conocidos:', this.validSolicitudValues);
        }
    }

    notifyConnectionStatus(connected) {
        try {
            const event = new CustomEvent('airtableConnectionUpdate', {
                detail: { 
                    connected, 
                    timestamp: new Date(),
                    method: this.useProxy ? 'proxy' : 'direct',
                    hostname: this.hostname
                }
            });
            window.dispatchEvent(event);
        } catch (error) {
            console.warn('‚ö†Ô∏è No se pudo notificar cambio de estado:', error);
        }
    }

    async makeRequest(endpoint, method = 'GET', data = null) {
        console.log('üì° Request:', method, endpoint);
        
        try {
            let url, options;
            
            if (this.useProxy) {
                url = `${this.baseUrl}/${endpoint}`;
                options = {
                    method: method,
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    mode: 'cors',
                    credentials: 'same-origin'
                };
            } else {
                url = `${this.baseUrl}/${endpoint}`;
                options = {
                    method: method,
                    headers: {
                        'Authorization': `Bearer ${this.directApiKey}`,
                        'Content-Type': 'application/json'
                    },
                    mode: 'cors'
                };
            }
            
            if (data && (method === 'POST' || method === 'PATCH')) {
                options.body = JSON.stringify(data);
                console.log('üìä Datos enviados:', JSON.stringify(data, null, 2));
            }
            
            const response = await fetch(url, options);
            
            console.log('üì® Status:', response.status);
            
            if (!response.ok) {
                const errorText = await response.text();
                console.error('‚ùå Error response:', errorText);
                
                if (response.status === 422) {
                    console.error('üö® ERROR 422 - Valores de campo inv√°lidos');
                    console.error('üîç Datos enviados:', data);
                    
                    try {
                        const errorData = JSON.parse(errorText);
                        if (errorData.error && errorData.error.type === 'INVALID_MULTIPLE_CHOICE_OPTIONS') {
                            const message = errorData.error.message || '';
                            const fieldMatch = message.match(/field (\w+)/);
                            const valueMatch = message.match(/option "(.+?)"/);
                            
                            if (fieldMatch && valueMatch) {
                                const fieldName = fieldMatch[1];
                                const invalidValue = valueMatch[1];
                                console.error(`üéØ Campo: ${fieldName}, Valor inv√°lido: "${invalidValue}"`);
                                
                                // Sugerir soluci√≥n
                                console.log('üí° SOLUCI√ìN: Verificar valores v√°lidos en Airtable para el campo', fieldName);
                                console.log('üí° Valores detectados:', this.validSolicitudValues);
                            }
                        }
                    } catch (parseError) {
                        console.error('Error parseando respuesta 422:', parseError);
                    }
                    
                    throw new Error(`HTTP 422: Valores inv√°lidos. Verificar configuraci√≥n de campos en Airtable.`);
                }
                
                throw new Error(`HTTP ${response.status}: ${errorText}`);
            }
            
            const result = await response.json();
            console.log('‚úÖ Request exitoso');
            
            return result;
            
        } catch (error) {
            console.error('‚ùå Request fall√≥:', error);
            throw error;
        }
    }

    async testConnection() {
        console.log('üß™ Test de conexi√≥n...');
        
        try {
            const response = await this.makeRequest(`${this.tables.solicitudes}?maxRecords=1`);
            return true;
        } catch (error) {
            console.error('‚ùå Test fall√≥:', error.message);
            return false;
        }
    }

    // üîê M√âTODO CR√çTICO CORREGIDO: Crear solicitud de acceso
    async createSolicitudAcceso(solicitudData) {
        console.log('üìù Creando solicitud de acceso con detecci√≥n autom√°tica de valores...');
        console.log('üîç Datos recibidos:', solicitudData);
        
        try {
            // Limpiar todos los valores de string
            const cleanData = {};
            Object.keys(solicitudData).forEach(key => {
                const value = solicitudData[key];
                if (typeof value === 'string') {
                    cleanData[key] = this.cleanFieldValue(value);
                } else {
                    cleanData[key] = value;
                }
            });
            
            // Preparar datos base
            const baseData = {
                nombreCompleto: cleanData.nombreCompleto || '',
                email: cleanData.email || '',
                telefono: cleanData.telefono || '',
                servicioHospitalario: cleanData.servicioHospitalario || '',
                cargo: cleanData.cargo || '',
                justificacion: cleanData.justificacion || '',
                fechaSolicitud: cleanData.fechaSolicitud || new Date().toISOString(),
                esUrgente: cleanData.esUrgente || false
            };
            
            // CR√çTICO: Usar el valor de estado detectado o valor por defecto
            if (this.validAccessRequestValues.estado) {
                console.log(`‚úÖ Usando valor de estado detectado: "${this.validAccessRequestValues.estado}"`);
                baseData.estado = this.validAccessRequestValues.estado;
            } else {
                console.log('üìã Usando valor de estado por defecto: "Pendiente"');
                baseData.estado = 'Pendiente';
            }
            
            const data = {
                fields: baseData
            };
            
            console.log('üìù Datos finales a enviar:', JSON.stringify(data, null, 2));
            
            try {
                const result = await this.makeRequest(this.tables.solicitudesAcceso, 'POST', data);
                console.log('‚úÖ Solicitud de acceso creada exitosamente:', result.id);
                return result;
                
            } catch (error) {
                if (error.message.includes('422') && error.message.includes('estado')) {
                    console.warn('‚ö†Ô∏è Error con campo estado, reintentando sin estado...');
                    
                    // Reintentar sin campo estado
                    delete baseData.estado;
                    const dataWithoutEstado = { fields: baseData };
                    
                    const result = await this.makeRequest(this.tables.solicitudesAcceso, 'POST', dataWithoutEstado);
                    console.log('‚úÖ Solicitud creada sin campo estado:', result.id);
                    return result;
                }
                
                throw error;
            }
            
        } catch (error) {
            console.error('‚ùå Error creando solicitud de acceso:', error);
            
            // Si todo falla, intentar con campos absolutamente m√≠nimos
            if (error.message.includes('422')) {
                console.log('üîÑ √öltimo intento con campos m√≠nimos...');
                return await this.createSolicitudAccesoMinimal(solicitudData);
            }
            
            throw error;
        }
    }

    // M√©todo fallback para crear solicitud con campos m√≠nimos
    async createSolicitudAccesoMinimal(solicitudData) {
        console.log('üîÑ Creando solicitud de acceso con campos absolutamente m√≠nimos...');
        
        try {
            const data = {
                fields: {
                    nombreCompleto: this.cleanFieldValue(solicitudData.nombreCompleto || 'Sin nombre'),
                    email: this.cleanFieldValue(solicitudData.email || 'no-email@temp.com'),
                    fechaSolicitud: new Date().toISOString()
                }
            };
            
            console.log('üìù Datos m√≠nimos:', data);
            const result = await this.makeRequest(this.tables.solicitudesAcceso, 'POST', data);
            
            console.log('‚úÖ Solicitud creada con campos m√≠nimos:', result.id);
            
            // Intentar agregar m√°s campos uno por uno
            const fieldsToAdd = [
                { telefono: solicitudData.telefono },
                { servicioHospitalario: solicitudData.servicioHospitalario },
                { cargo: solicitudData.cargo },
                { justificacion: solicitudData.justificacion }
            ];
            
            for (const fieldObj of fieldsToAdd) {
                const [fieldName, fieldValue] = Object.entries(fieldObj)[0];
                if (fieldValue) {
                    try {
                        await this.makeRequest(`${this.tables.solicitudesAcceso}/${result.id}`, 'PATCH', {
                            fields: { [fieldName]: this.cleanFieldValue(fieldValue) }
                        });
                        console.log(`‚úÖ Campo ${fieldName} agregado`);
                    } catch (error) {
                        console.warn(`‚ö†Ô∏è No se pudo agregar campo ${fieldName}:`, error.message);
                    }
                }
            }
            
            return result;
            
        } catch (error) {
            console.error('‚ùå Error incluso con campos m√≠nimos:', error);
            throw new Error('No se pudo crear la solicitud. Por favor contacte al administrador.');
        }
    }

    // üîê M√âTODO CORREGIDO: Aprobar solicitud y crear usuario (sin campos inexistentes)
    async approveAccessRequestAndCreateUser(requestId) {
        console.log('‚úÖ Iniciando aprobaci√≥n de solicitud:', requestId);
        
        try {
            // 1. Obtener la solicitud de acceso
            const solicitudesAcceso = await this.getSolicitudesAcceso();
            const solicitud = solicitudesAcceso.find(s => s.id === requestId);
            
            if (!solicitud) {
                throw new Error('Solicitud de acceso no encontrada');
            }

            if (solicitud.estado === 'APROBADA' || solicitud.estado === 'Aprobada') {
                throw new Error('La solicitud ya fue aprobada anteriormente');
            }

            // 2. Generar c√≥digo de acceso
            const codigoAcceso = Math.floor(1000 + Math.random() * 9000).toString();
            console.log(`üîê C√≥digo generado: ${codigoAcceso}`);

            // 3. Detectar valores v√°lidos si no se han detectado
            if (!this.validUserValues.estado) {
                await this.detectValidUserValues();
            }

            // 4. Preparar datos del usuario con valores limpios
            const userData = {
                nombreCompleto: this.cleanFieldValue(solicitud.nombreCompleto || 'Sin nombre'),
                email: this.cleanFieldValue(solicitud.email || 'no-email@temp.com'),
                servicioHospitalario: this.cleanFieldValue(solicitud.servicioHospitalario || ''),
                cargo: this.cleanFieldValue(solicitud.cargo || ''),
                codigoAcceso: codigoAcceso,
                fechaCreacion: new Date().toISOString(),
                solicitudOrigenId: requestId  // ID de la solicitud de origen
            };

            // 5. Agregar estado si tenemos un valor v√°lido
            if (this.validUserValues.estado) {
                userData.estado = this.validUserValues.estado;
            } else {
                userData.estado = 'Activo';
                console.warn('‚ö†Ô∏è Usando valor de estado por defecto: "Activo"');
            }

            console.log('üìù Datos del usuario a crear:', userData);

            // 6. Intentar crear el usuario
            let newUser;
            try {
                newUser = await this.makeRequest(this.tables.usuarios, 'POST', {
                    fields: userData
                });
                console.log('‚úÖ Usuario creado exitosamente:', newUser.id);
                
            } catch (error) {
                if (error.message.includes('422')) {
                    console.warn('‚ö†Ô∏è Error 422 al crear usuario, reintentando con campos m√≠nimos...');
                    
                    // Reintentar con campos absolutamente m√≠nimos
                    const minimalUserData = {
                        nombreCompleto: userData.nombreCompleto,
                        email: userData.email,
                        codigoAcceso: userData.codigoAcceso,
                        fechaCreacion: userData.fechaCreacion
                    };
                    
                    newUser = await this.makeRequest(this.tables.usuarios, 'POST', {
                        fields: minimalUserData
                    });
                    
                    console.log('‚úÖ Usuario creado con campos m√≠nimos:', newUser.id);
                } else {
                    throw error;
                }
            }

            // 7. Actualizar SOLO el estado de la solicitud de acceso
            try {
                // Detectar el valor correcto para estado APROBADA
                let aprobadasValue = 'Aprobada';
                if (this.validAccessRequestValues.estadoValues) {
                    const aprobadaDetectada = this.validAccessRequestValues.estadoValues.find(v => 
                        v.toUpperCase().includes('APROBADA') || v.toUpperCase().includes('APROBADO')
                    );
                    if (aprobadaDetectada) {
                        aprobadasValue = aprobadaDetectada;
                        console.log(`‚úÖ Usando valor de estado detectado: "${aprobadasValue}"`);
                    }
                }

                // IMPORTANTE: Solo actualizar campos que existan en Airtable
                const updateFields = {
                    estado: aprobadasValue
                };
                
                // Solo agregar usuarioCreado si sabemos que el campo existe
                if (this.validAccessRequestValues.availableFields.includes('usuarioCreado')) {
                    updateFields.usuarioCreado = newUser.id;
                }

                console.log('üìù Actualizando solicitud con campos:', updateFields);

                await this.makeRequest(`${this.tables.solicitudesAcceso}/${requestId}`, 'PATCH', {
                    fields: updateFields
                });
                
                console.log('‚úÖ Solicitud de acceso actualizada');
                
            } catch (updateError) {
                console.error('‚ùå Error actualizando solicitud de acceso:', updateError);
                console.warn('‚ö†Ô∏è El usuario fue creado pero no se pudo actualizar completamente la solicitud');
            }

            // 8. Retornar resultado exitoso
            return {
                success: true,
                user: {
                    id: newUser.id,
                    ...newUser.fields
                },
                accessCode: codigoAcceso,
                requestId: requestId
            };

        } catch (error) {
            console.error('‚ùå Error en aprobaci√≥n:', error);
            throw error;
        }
    }

    async getSolicitudes() {
        try {
            const result = await this.makeRequest(this.tables.solicitudes);
            return result.records.map(record => ({
                id: record.id,
                ...record.fields
            }));
        } catch (error) {
            console.error('‚ùå Error obteniendo solicitudes:', error);
            return [];
        }
    }

    async getTecnicos() {
        try {
            const result = await this.makeRequest(this.tables.tecnicos);
            return result.records.map(record => ({
                id: record.id,
                ...record.fields
            }));
        } catch (error) {
            console.error('‚ùå Error obteniendo t√©cnicos:', error);
            return [];
        }
    }

    async getUsuarios() {
        try {
            const result = await this.makeRequest(this.tables.usuarios);
            return result.records.map(record => ({
                id: record.id,
                ...record.fields
            }));
        } catch (error) {
            console.error('‚ùå Error obteniendo usuarios:', error);
            return [];
        }
    }

    async getSolicitudesAcceso() {
        try {
            const result = await this.makeRequest(this.tables.solicitudesAcceso);
            return result.records.map(record => ({
                id: record.id,
                ...record.fields
            }));
        } catch (error) {
            console.error('‚ùå Error obteniendo solicitudes de acceso:', error);
            return [];
        }
    }

    async validateUserCredentials(email, codigoAcceso) {
        try {
            const usuarios = await this.getUsuarios();
            const user = usuarios.find(u => 
                u.email && u.email.toLowerCase() === email.toLowerCase()
            );
            
            if (!user) {
                return { valid: false, error: 'Usuario no encontrado' };
            }

            const estadoActivo = ['ACTIVO', 'Activo', 'activo'];
            if (!estadoActivo.includes(user.estado)) {
                return { valid: false, error: `Usuario en estado: ${user.estado}` };
            }

            if (String(user.codigoAcceso) !== String(codigoAcceso)) {
                return { valid: false, error: 'C√≥digo incorrecto' };
            }

            return { valid: true, user: user };

        } catch (error) {
            console.error('‚ùå Error validando credenciales:', error);
            return { valid: false, error: 'Error de sistema' };
        }
    }

    mapFieldValue(fieldType, value) {
        if (!value) return value;
        
        const cleanValue = this.cleanFieldValue(value);
        
        console.log(`üó∫Ô∏è Mapeando ${fieldType}: "${cleanValue}"`);
        
        // Si el valor ya es el esperado, devolverlo tal cual
        if (this.fieldMappings[fieldType]) {
            const mapping = this.fieldMappings[fieldType];
            
            // Si el valor es una clave directa del mapeo, devolver su valor mapeado
            if (mapping[cleanValue]) {
                const mappedValue = mapping[cleanValue];
                console.log(`‚úÖ Mapeado ${fieldType}: "${cleanValue}" ‚Üí "${mappedValue}"`);
                return mappedValue;
            }
            
            // Buscar si el valor es uno de los valores mapeados
            for (const [key, mappedValue] of Object.entries(mapping)) {
                if (mappedValue === cleanValue) {
                    console.log(`‚úÖ Valor ya mapeado correctamente: "${cleanValue}"`);
                    return mappedValue;
                }
            }
        }
        
        console.log(`‚ö†Ô∏è No se encontr√≥ mapeo para ${fieldType}: "${cleanValue}" - usando valor original`);
        return cleanValue;
    }

    prepareSafeData(data, tableName) {
        console.log(`üõ°Ô∏è Preparando datos seguros para tabla: ${tableName}`);
        console.log(`üîç Datos originales:`, data);
        
        const safeFields = SAFE_FIELDS[tableName] || [];
        const safeData = {};
        
        Object.keys(data).forEach(key => {
            if (safeFields.includes(key)) {
                let value = data[key];
                
                if (typeof value === 'string') {
                    value = this.cleanFieldValue(value);
                }
                
                if (this.fieldMappings[key]) {
                    const originalValue = value;
                    value = this.mapFieldValue(key, value);
                    if (originalValue !== value) {
                        console.log(`üó∫Ô∏è MAPEO APLICADO para ${key}: "${originalValue}" ‚Üí "${value}"`);
                    }
                }
                
                safeData[key] = value;
                console.log(`‚úÖ Campo ${key}: ${value}`);
            } else {
                console.warn(`‚ö†Ô∏è Campo '${key}' omitido - no est√° en lista segura para ${tableName}`);
            }
        });
        
        console.log(`‚úÖ Datos seguros preparados:`, safeData);
        return safeData;
    }

    async generateAreaSpecificNumber(area) {
        console.log('üî¢ Generando n√∫mero espec√≠fico para √°rea:', area);
        
        try {
            let normalizedArea = area;
            if (area && (area.toLowerCase().includes('biomed') || area.toLowerCase().includes('biom√©d'))) {
                normalizedArea = 'INGENIERIA_BIOMEDICA';
                console.log(`üîß √Årea normalizada: ${area} ‚Üí ${normalizedArea}`);
            }
            
            const solicitudes = await this.getSolicitudes();
            
            const prefix = this.areaPrefixes[normalizedArea];
            if (!prefix) {
                console.warn('‚ö†Ô∏è √Årea no reconocida, usando formato est√°ndar');
                return `SOL${Date.now()}${Math.random().toString(36).substring(2, 3).toUpperCase()}`;
            }

            const areaRequests = solicitudes.filter(s => 
                s.numero && s.numero.startsWith(prefix)
            );

            let maxNumber = 0;
            areaRequests.forEach(solicitud => {
                const numberPart = solicitud.numero.replace(prefix, '');
                const num = parseInt(numberPart);
                if (!isNaN(num) && num > maxNumber) {
                    maxNumber = num;
                }
            });

            const nextNumber = maxNumber + 1;
            const formattedNumber = nextNumber.toString().padStart(5, '0');
            const newRequestNumber = `${prefix}${formattedNumber}`;

            console.log(`‚úÖ N√∫mero generado para ${normalizedArea}: ${newRequestNumber} (siguiente: ${nextNumber})`);
            return newRequestNumber;

        } catch (error) {
            console.error('‚ùå Error generando n√∫mero espec√≠fico:', error);
            const prefix = this.areaPrefixes[area] || 'SOL';
            const randomPart = Date.now().toString().slice(-5);
            return `${prefix}${randomPart}`;
        }
    }

    // üìã M√âTODO ACTUALIZADO Y MEJORADO: Crear solicitud
    async createSolicitud(solicitudData) {
        console.log('üìù Creando solicitud con mapeo y valores conocidos...');
        console.log('üîç Datos recibidos:', solicitudData);
        console.log('üè• √ÅREA RECIBIDA:', solicitudData.servicioIngenieria);
        console.log('üìã Valores v√°lidos conocidos:', this.validSolicitudValues);
        
        try {
            // CR√çTICO: Aplicar mapeo de valores
            const mappedData = { ...solicitudData };
            
            // Mapear servicioIngenieria
            if (mappedData.servicioIngenieria && this.fieldMappings.servicioIngenieria[mappedData.servicioIngenieria]) {
                const valorOriginal = mappedData.servicioIngenieria;
                mappedData.servicioIngenieria = this.fieldMappings.servicioIngenieria[mappedData.servicioIngenieria];
                console.log(`üó∫Ô∏è √ÅREA MAPEADA: ${valorOriginal} ‚Üí ${mappedData.servicioIngenieria}`);
            }
            
            // Mapear tipoServicio
            if (mappedData.tipoServicio && this.fieldMappings.tipoServicio[mappedData.tipoServicio]) {
                const valorOriginal = mappedData.tipoServicio;
                mappedData.tipoServicio = this.fieldMappings.tipoServicio[mappedData.tipoServicio];
                console.log(`üó∫Ô∏è TIPO SERVICIO MAPEADO: ${valorOriginal} ‚Üí ${mappedData.tipoServicio}`);
            }
            
            // Mapear prioridad
            if (mappedData.prioridad && this.fieldMappings.prioridad[mappedData.prioridad]) {
                const valorOriginal = mappedData.prioridad;
                mappedData.prioridad = this.fieldMappings.prioridad[mappedData.prioridad];
                console.log(`üó∫Ô∏è PRIORIDAD MAPEADA: ${valorOriginal} ‚Üí ${mappedData.prioridad}`);
            }
            
            // VERIFICAR QUE EL VALOR MAPEADO SEA V√ÅLIDO
            if (mappedData.servicioIngenieria && 
                this.validSolicitudValues.servicioIngenieria.length > 0 &&
                !this.validSolicitudValues.servicioIngenieria.includes(mappedData.servicioIngenieria)) {
                console.warn(`‚ö†Ô∏è Valor mapeado ${mappedData.servicioIngenieria} no est√° en la lista de valores v√°lidos`);
                console.log('üìã Valores v√°lidos detectados:', this.validSolicitudValues.servicioIngenieria);
                
                // Intentar encontrar un valor similar
                const valorSimilar = this.validSolicitudValues.servicioIngenieria.find(v => 
                    v.toLowerCase().includes('biom') && mappedData.servicioIngenieria.toLowerCase().includes('biom') ||
                    v.toLowerCase().includes('mec') && mappedData.servicioIngenieria.toLowerCase().includes('mec') ||
                    v.toLowerCase().includes('infra') && mappedData.servicioIngenieria.toLowerCase().includes('infra')
                );
                
                if (valorSimilar) {
                    console.log(`‚úÖ Usando valor v√°lido similar: ${valorSimilar}`);
                    mappedData.servicioIngenieria = valorSimilar;
                }
            }
            
            // Generar n√∫mero espec√≠fico del √°rea
            const numero = await this.generateAreaSpecificNumber(solicitudData.servicioIngenieria);
            
            // Preparar datos con valores mapeados
            const rawData = {
                numero: numero,
                descripcion: mappedData.descripcion || 'Solicitud de mantenimiento',
                estado: 'Pendiente', // Usar valor que sabemos que funciona
                fechaCreacion: new Date().toISOString(),
                servicioIngenieria: mappedData.servicioIngenieria,
                tipoServicio: mappedData.tipoServicio,
                prioridad: mappedData.prioridad,
                equipo: mappedData.equipo,
                ubicacion: mappedData.ubicacion,
                observaciones: mappedData.observaciones,
                solicitante: mappedData.solicitante,
                servicioHospitalario: mappedData.servicioHospitalario,
                emailSolicitante: mappedData.emailSolicitante,
                tiempoRespuestaMaximo: this.calculateMaxResponseTime(mappedData.prioridad || 'Media')
            };
            
            // CR√çTICO: Verificar que el √°rea no sea undefined o null
            if (!rawData.servicioIngenieria) {
                console.error('‚ùå ERROR CR√çTICO: servicioIngenieria es undefined o null');
                console.error('Datos originales:', solicitudData);
                throw new Error('El √°rea de ingenier√≠a es requerida');
            }
            
            // Limpiar campos undefined o null
            const cleanData = {};
            Object.keys(rawData).forEach(key => {
                if (rawData[key] !== undefined && rawData[key] !== null && rawData[key] !== '') {
                    cleanData[key] = rawData[key];
                }
            });
            
            const data = {
                fields: cleanData
            };
            
            console.log('üìù Datos finales a enviar (con valores mapeados):', JSON.stringify(data, null, 2));
            console.log('üè• √ÅREA FINAL A GUARDAR:', data.fields.servicioIngenieria);
            console.log('üîß TIPO SERVICIO FINAL:', data.fields.tipoServicio);
            
            try {
                const result = await this.makeRequest(this.tables.solicitudes, 'POST', data);
                console.log(`‚úÖ Solicitud creada correctamente: ${numero}`);
                console.log(`üè• √Årea guardada: ${data.fields.servicioIngenieria}`);
                console.log(`üîß Tipo servicio guardado: ${data.fields.tipoServicio}`);
                
                // Verificar que el √°rea se guard√≥
                if (result.fields && result.fields.servicioIngenieria) {
                    console.log(`‚úÖ √ÅREA CONFIRMADA EN RESPUESTA: ${result.fields.servicioIngenieria}`);
                } else {
                    console.warn(`‚ö†Ô∏è √ÅREA NO CONFIRMADA EN RESPUESTA`);
                    console.log('Respuesta completa:', result);
                }
                
                return result;
                
            } catch (error) {
                if (error.message.includes('422')) {
                    console.error('üö® ERROR 422 - Valores inv√°lidos');
                    console.error('üìã Valores detectados disponibles:', this.validSolicitudValues);
                    console.error('üìù Datos que se intentaron enviar:', data);
                    
                    // Proporcionar informaci√≥n m√°s espec√≠fica del error
                    let mensajeError = 'No se pudo crear la solicitud. ';
                    
                    try {
                        // Intentar extraer informaci√≥n espec√≠fica del error
                        if (error.message.includes('servicioIngenieria')) {
                            mensajeError += `El valor "${mappedData.servicioIngenieria}" no es v√°lido para el √°rea. `;
                            mensajeError += `Valores v√°lidos: ${this.validSolicitudValues.servicioIngenieria.join(', ')}`;
                        } else if (error.message.includes('tipoServicio')) {
                            mensajeError += `El tipo de servicio "${mappedData.tipoServicio}" no es v√°lido. `;
                            mensajeError += `Valores v√°lidos: ${this.validSolicitudValues.tipoServicio.join(', ')}`;
                        } else if (error.message.includes('prioridad')) {
                            mensajeError += `La prioridad "${mappedData.prioridad}" no es v√°lida. `;
                        } else {
                            mensajeError += 'Verifique la configuraci√≥n de campos en Airtable.';
                        }
                    } catch (e) {
                        mensajeError += 'Verifique la configuraci√≥n de campos en Airtable.';
                    }
                    
                    throw new Error(mensajeError);
                }
                
                throw error;
            }
            
        } catch (error) {
            console.error('‚ùå Error creando solicitud:', error);
            throw error;
        }
    }

    calculateMaxResponseTime(prioridad) {
        const tiemposRespuesta = {
            'Cr√≠tica': 2,  // 2 horas
            'Alta': 8,     // 8 horas
            'Media': 24,   // 24 horas
            'Baja': 72,    // 72 horas
            'CRITICA': 2,
            'ALTA': 8,
            'MEDIA': 24,
            'BAJA': 72
        };
        
        const horas = tiemposRespuesta[prioridad] || 24;
        const fechaMaxima = new Date();
        fechaMaxima.setHours(fechaMaxima.getHours() + horas);
        
        return fechaMaxima.toISOString();
    }

    // üìä FUNCI√ìN PARA CALCULAR TIEMPO DE RESPUESTA
    calculateResponseTime(solicitud) {
        if (!solicitud.fechaCreacion) return null;
        
        const fechaCreacion = new Date(solicitud.fechaCreacion);
        let fechaFin = new Date();
        
        if (solicitud.fechaCompletado) {
            fechaFin = new Date(solicitud.fechaCompletado);
        } else if (solicitud.estado === 'CANCELADA' || solicitud.estado === 'Cancelada') {
            // Si est√° cancelada, usar la fecha actual como fin
            fechaFin = new Date();
        }
        
        const tiempoMs = fechaFin - fechaCreacion;
        const horas = Math.floor(tiempoMs / (1000 * 60 * 60));
        const minutos = Math.floor((tiempoMs % (1000 * 60 * 60)) / (1000 * 60));
        
        return {
            totalMs: tiempoMs,
            horas: horas,
            minutos: minutos,
            formato: `${horas}h ${minutos}m`,
            diasDecimales: (tiempoMs / (1000 * 60 * 60 * 24)).toFixed(2)
        };
    }

    async createTecnico(tecnicoData) {
        console.log('‚ûï Creando personal de soporte:', tecnicoData.nombre);
        console.log('üîç √Årea recibida:', tecnicoData.area);
        
        const rawData = {
            nombre: tecnicoData.nombre,
            email: tecnicoData.email,
            area: tecnicoData.area,
            tipo: tecnicoData.tipo,
            especialidad: tecnicoData.especialidad || '',
            estado: tecnicoData.estado || 'disponible',
            fechaCreacion: new Date().toISOString()
        };
        
        const safeData = this.prepareSafeData(rawData, 'tecnicos');
        
        const data = {
            fields: safeData
        };
        
        console.log('üìù Creando t√©cnico con √°rea mapeada:', data);
        
        try {
            const result = await this.makeRequest(this.tables.tecnicos, 'POST', data);
            console.log('‚úÖ Personal de soporte creado exitosamente:', result.id, '- √Årea:', safeData.area);
            return result;
        } catch (error) {
            console.error('‚ùå Error creando personal de soporte:', error);
            throw new Error(`Error creando personal: ${error.message}`);
        }
    }

    async updateTecnico(tecnicoId, updateData) {
        console.log('üîÑ Actualizando personal de soporte:', tecnicoId);
        
        const safeData = this.prepareSafeData(updateData, 'tecnicos');
        const data = { fields: safeData };
        
        try {
            const result = await this.makeRequest(`${this.tables.tecnicos}/${tecnicoId}`, 'PATCH', data);
            console.log('‚úÖ Personal de soporte actualizado exitosamente');
            return result;
        } catch (error) {
            console.error('‚ùå Error actualizando personal:', error);
            throw error;
        }
    }

    async assignTechnicianToRequest(solicitudId, tecnicoId, observaciones = '') {
        console.log('üéØ Asignando t√©cnico:', { solicitudId, tecnicoId });
        
        try {
            const [solicitudes, tecnicos] = await Promise.all([
                this.getSolicitudes(),
                this.getTecnicos()
            ]);
            
            const solicitud = solicitudes.find(s => s.id === solicitudId);
            const tecnico = tecnicos.find(t => t.id === tecnicoId);
            
            if (!solicitud) {
                throw new Error('Solicitud no encontrada');
            }
            
            if (!tecnico) {
                throw new Error('T√©cnico no encontrado');
            }
            
            const solicitudArea = solicitud.servicioIngenieria;
            const tecnicoArea = tecnico.area;
            
            console.log('üîç Verificando compatibilidad:', { solicitudArea, tecnicoArea });
            
            const normalizeBiomedArea = (area) => {
                if (!area) return area;
                const lowerArea = area.toLowerCase();
                if (lowerArea.includes('biomed') || lowerArea.includes('biom√©d')) {
                    return 'BIOMEDICA_NORMALIZED';
                }
                return area.toUpperCase();
            };
            
            const normalizedSolicitudArea = normalizeBiomedArea(solicitudArea);
            const normalizedTecnicoArea = normalizeBiomedArea(tecnicoArea);
            
            console.log('üîç √Åreas normalizadas:', { normalizedSolicitudArea, normalizedTecnicoArea });
            
            if (normalizedSolicitudArea !== normalizedTecnicoArea) {
                console.warn('‚ö†Ô∏è Advertencia: √Åreas no coinciden exactamente, pero permitiendo asignaci√≥n');
            }
            
            const fechaAsignacion = new Date().toISOString();
            const tiempoEstimadoRespuesta = this.calculateMaxResponseTime(solicitud.prioridad || 'MEDIA');
            
            await this.makeRequest(`${this.tables.solicitudes}/${solicitudId}`, 'PATCH', {
                fields: {
                    tecnicoAsignado: tecnico.nombre,
                    estado: this.mapFieldValue('estado', 'ASIGNADA'),
                    fechaAsignacion: fechaAsignacion,
                    observacionesAsignacion: observaciones,
                    tiempoRespuestaMaximo: tiempoEstimadoRespuesta
                }
            });
            
            await this.makeRequest(`${this.tables.tecnicos}/${tecnicoId}`, 'PATCH', {
                fields: {
                    estado: this.mapFieldValue('estado', 'ocupado'),
                    solicitudAsignada: solicitud.numero || solicitudId
                }
            });
            
            console.log(`‚úÖ Asignaci√≥n exitosa: ${tecnico.nombre} ‚Üí ${solicitud.numero}`);
            
            return {
                success: true,
                solicitud: { ...solicitud, tecnicoAsignado: tecnico.nombre, estado: 'ASIGNADA' },
                tecnico: { ...tecnico, estado: 'ocupado' },
                fechaAsignacion: fechaAsignacion,
                tiempoEstimadoRespuesta: tiempoEstimadoRespuesta
            };
            
        } catch (error) {
            console.error('‚ùå Error en asignaci√≥n:', error);
            throw error;
        }
    }

    // üîÑ M√âTODO CORREGIDO: Actualizar estado de solicitud
    async updateRequestStatus(solicitudId, nuevoEstado, observaciones = '') {
        console.log('üîÑ Actualizando estado de solicitud:', { solicitudId, nuevoEstado });
        
        try {
            // Obtener la solicitud actual para validar
            const solicitudes = await this.getSolicitudes();
            const solicitud = solicitudes.find(s => s.id === solicitudId);
            
            if (!solicitud) {
                throw new Error('Solicitud no encontrada');
            }
            
            console.log('üìã Estado actual:', solicitud.estado);
            console.log('üîÑ Nuevo estado solicitado:', nuevoEstado);
            
            // Mapear el nuevo estado
            const estadoMapeado = this.mapFieldValue('estado', nuevoEstado);
            console.log('üó∫Ô∏è Estado mapeado:', estadoMapeado);
            
            // Preparar campos a actualizar
            const updateData = {
                estado: estadoMapeado
            };
            
            // Agregar observaciones si se proporcionan
            if (observaciones) {
                updateData.observaciones = (solicitud.observaciones || '') + '\n[' + new Date().toLocaleString('es-CO') + '] ' + observaciones;
            }
            
            // L√≥gica espec√≠fica seg√∫n el estado
            if (nuevoEstado === 'EN_PROCESO' || nuevoEstado === 'EN PROCESO') {
                updateData.fechaInicioTrabajo = new Date().toISOString();
                console.log('üìÖ Registrando fecha de inicio de trabajo');
                
            } else if (nuevoEstado === 'COMPLETADA') {
                const fechaCompletado = new Date();
                updateData.fechaCompletado = fechaCompletado.toISOString();
                
                // Calcular tiempo total de respuesta
                if (solicitud.fechaCreacion) {
                    const fechaCreacion = new Date(solicitud.fechaCreacion);
                    const tiempoTotalMs = fechaCompletado - fechaCreacion;
                    const horas = Math.floor(tiempoTotalMs / (1000 * 60 * 60));
                    const minutos = Math.floor((tiempoTotalMs % (1000 * 60 * 60)) / (1000 * 60));
                    updateData.tiempoTotalRespuesta = `${horas}h ${minutos}m`;
                    
                    console.log('‚è±Ô∏è Tiempo total calculado:', updateData.tiempoTotalRespuesta);
                }
            }
            
            console.log('üìù Datos a actualizar:', updateData);
            
            // Realizar la actualizaci√≥n
            try {
                const result = await this.makeRequest(`${this.tables.solicitudes}/${solicitudId}`, 'PATCH', {
                    fields: updateData
                });
                
                console.log('‚úÖ Estado actualizado exitosamente');
                
                // Si se complet√≥ la solicitud, liberar el t√©cnico
                if (nuevoEstado === 'COMPLETADA' && solicitud.tecnicoAsignado) {
                    console.log('üîì Liberando t√©cnico asignado...');
                    await this.liberarTecnicoAsignado(solicitudId);
                }
                
                return { 
                    success: true, 
                    solicitud: { ...solicitud, ...updateData },
                    mensaje: `Estado cambiado a ${nuevoEstado}`
                };
                
            } catch (updateError) {
                console.error('‚ùå Error actualizando estado:', updateError);
                
                // Si el error es 422, intentar con valores alternativos
                if (updateError.message.includes('422')) {
                    console.warn('‚ö†Ô∏è Error 422 detectado, intentando con valores alternativos...');
                    
                    // Intentar con diferentes variaciones del estado
                    const estadoAlternativas = {
                        'EN_PROCESO': ['En Proceso', 'EN PROCESO', 'en_proceso'],
                        'COMPLETADA': ['Completada', 'completada'],
                        'ASIGNADA': ['Asignada', 'asignada'],
                        'PENDIENTE': ['Pendiente', 'pendiente'],
                        'CANCELADA': ['Cancelada', 'cancelada']
                    };
                    
                    const alternativas = estadoAlternativas[nuevoEstado] || [];
                    
                    for (const estadoAlt of alternativas) {
                        try {
                            console.log(`üîÑ Intentando con estado alternativo: ${estadoAlt}`);
                            updateData.estado = estadoAlt;
                            
                            const result = await this.makeRequest(`${this.tables.solicitudes}/${solicitudId}`, 'PATCH', {
                                fields: updateData
                            });
                            
                            console.log(`‚úÖ Estado actualizado con valor alternativo: ${estadoAlt}`);
                            
                            // Si se complet√≥ la solicitud, liberar el t√©cnico
                            if (nuevoEstado === 'COMPLETADA' && solicitud.tecnicoAsignado) {
                                await this.liberarTecnicoAsignado(solicitudId);
                            }
                            
                            return { 
                                success: true, 
                                solicitud: { ...solicitud, ...updateData },
                                mensaje: `Estado cambiado a ${nuevoEstado} (usando ${estadoAlt})`
                            };
                            
                        } catch (altError) {
                            console.warn(`‚ùå Fall√≥ con ${estadoAlt}:`, altError.message);
                            continue;
                        }
                    }
                }
                
                throw updateError;
            }
            
        } catch (error) {
            console.error('‚ùå Error en updateRequestStatus:', error);
            throw new Error(`Error actualizando estado: ${error.message}`);
        }
    }

    // üîì M√âTODO MEJORADO: Liberar t√©cnico asignado
    async liberarTecnicoAsignado(solicitudId) {
        console.log('üîì Liberando t√©cnico asignado para solicitud:', solicitudId);
        
        try {
            const solicitudes = await this.getSolicitudes();
            const solicitud = solicitudes.find(s => s.id === solicitudId);
            
            if (!solicitud || !solicitud.tecnicoAsignado) {
                console.log('‚ÑπÔ∏è No hay t√©cnico asignado para liberar');
                return { success: true, mensaje: 'No hab√≠a t√©cnico asignado' };
            }
            
            console.log('üë§ T√©cnico a liberar:', solicitud.tecnicoAsignado);
            
            const tecnicos = await this.getTecnicos();
            const tecnico = tecnicos.find(t => t.nombre === solicitud.tecnicoAsignado);
            
            if (tecnico) {
                console.log('üîÑ Actualizando estado del t√©cnico a disponible...');
                
                try {
                    await this.makeRequest(`${this.tables.tecnicos}/${tecnico.id}`, 'PATCH', {
                        fields: {
                            estado: 'disponible',
                            solicitudAsignada: ''
                        }
                    });
                    
                    console.log(`‚úÖ T√©cnico ${tecnico.nombre} liberado exitosamente`);
                    
                } catch (tecnicoError) {
                    console.error('‚ùå Error actualizando t√©cnico:', tecnicoError);
                    // Continuar aunque falle la actualizaci√≥n del t√©cnico
                }
            } else {
                console.warn('‚ö†Ô∏è No se encontr√≥ el t√©cnico en la base de datos');
            }
            
            // Actualizar la solicitud para quitar el t√©cnico asignado
            try {
                await this.makeRequest(`${this.tables.solicitudes}/${solicitudId}`, 'PATCH', {
                    fields: {
                        tecnicoAsignado: ''
                    }
                });
                console.log('‚úÖ T√©cnico removido de la solicitud');
            } catch (solicitudError) {
                console.error('‚ùå Error actualizando solicitud:', solicitudError);
            }
            
            return { 
                success: true, 
                mensaje: `T√©cnico ${solicitud.tecnicoAsignado} liberado`,
                tecnico: tecnico
            };
            
        } catch (error) {
            console.error('‚ùå Error liberando t√©cnico:', error);
            // No lanzar error para no interrumpir el flujo principal
            return { 
                success: false, 
                mensaje: 'Error liberando t√©cnico',
                error: error.message 
            };
        }
    }

    async updateSolicitudAcceso(requestId, updateData) {
        const cleanData = {};
        Object.keys(updateData).forEach(key => {
            const value = updateData[key];
            if (typeof value === 'string') {
                cleanData[key] = this.cleanFieldValue(value);
                console.log(`üìù Campo ${key} limpiado: "${updateData[key]}" ‚Üí "${cleanData[key]}"`);
            } else {
                cleanData[key] = value;
            }
        });
        
        const data = { fields: cleanData };
        return await this.makeRequest(`${this.tables.solicitudesAcceso}/${requestId}`, 'PATCH', data);
    }

    async autoAssignPendingRequests() {
        console.log('ü§ñ Iniciando auto-asignaci√≥n de solicitudes pendientes...');
        
        try {
            const [solicitudes, tecnicos] = await Promise.all([
                this.getSolicitudes(),
                this.getTecnicos()
            ]);
            
            const solicitudesPendientes = solicitudes.filter(s => 
                s.estado === 'PENDIENTE' || s.estado === 'Pendiente' || !s.tecnicoAsignado
            );
            
            const tecnicosDisponibles = tecnicos.filter(t => t.estado === 'disponible');
            
            let asignadas = 0;
            let fallidas = 0;
            let sinTecnicos = 0;
            const detalles = [];
            
            for (const solicitud of solicitudesPendientes) {
                try {
                    const normalizeBiomedArea = (area) => {
                        if (!area) return area;
                        const lowerArea = area.toLowerCase();
                        if (lowerArea.includes('biomed') || lowerArea.includes('biom√©d')) {
                            return 'BIOMEDICA_NORMALIZED';
                        }
                        return area.toUpperCase();
                    };
                    
                    const solicitudAreaNorm = normalizeBiomedArea(solicitud.servicioIngenieria);
                    
                    const tecnicoCompatible = tecnicosDisponibles.find(t => {
                        const tecnicoAreaNorm = normalizeBiomedArea(t.area);
                        return tecnicoAreaNorm === solicitudAreaNorm;
                    });
                    
                    if (!tecnicoCompatible) {
                        sinTecnicos++;
                        console.log(`‚ö†Ô∏è Sin t√©cnico disponible para ${solicitud.numero} (${solicitud.servicioIngenieria})`);
                        continue;
                    }
                    
                    await this.assignTechnicianToRequest(
                        solicitud.id, 
                        tecnicoCompatible.id, 
                        'Asignaci√≥n autom√°tica del sistema'
                    );
                    
                    asignadas++;
                    detalles.push({
                        solicitud: solicitud.numero,
                        tecnico: tecnicoCompatible.nombre,
                        area: solicitud.servicioIngenieria
                    });
                    
                    const tecnicoIndex = tecnicosDisponibles.findIndex(t => t.id === tecnicoCompatible.id);
                    if (tecnicoIndex !== -1) {
                        tecnicosDisponibles.splice(tecnicoIndex, 1);
                    }
                    
                } catch (error) {
                    fallidas++;
                    console.error(`‚ùå Error asignando ${solicitud.numero}:`, error);
                }
            }
            
            return {
                asignadas,
                fallidas,
                sinTecnicos,
                detalles,
                total: solicitudesPendientes.length
            };
            
        } catch (error) {
            console.error('‚ùå Error en auto-asignaci√≥n:', error);
            throw error;
        }
    }

    // üìä M√âTODO MEJORADO: Estad√≠sticas avanzadas con indicadores solicitados
    async getAdvancedStatistics() {
        try {
            const [solicitudes, tecnicos, usuarios] = await Promise.all([
                this.getSolicitudes(),
                this.getTecnicos(),
                this.getUsuarios()
            ]);
            
            // Estad√≠sticas b√°sicas existentes
            const totalSolicitudes = solicitudes.length;
            const pendientes = solicitudes.filter(s => s.estado === 'PENDIENTE' || s.estado === 'Pendiente').length;
            const asignadas = solicitudes.filter(s => s.estado === 'ASIGNADA' || s.estado === 'Asignada').length;
            const enProceso = solicitudes.filter(s => s.estado === 'EN_PROCESO' || s.estado === 'En Proceso').length;
            const completadas = solicitudes.filter(s => s.estado === 'COMPLETADA' || s.estado === 'Completada').length;
            const canceladas = solicitudes.filter(s => s.estado === 'CANCELADA' || s.estado === 'Cancelada').length;
            
            // 1. PORCENTAJE DE GESTI√ìN DE SOLICITUDES COMPLETADAS
            const porcentajeCompletadas = totalSolicitudes > 0 
                ? ((completadas / totalSolicitudes) * 100).toFixed(2) 
                : 0;
            
            // 2. PORCENTAJE DE MANTENIMIENTOS CORRECTIVOS
            const mantenimientosCorrectivos = solicitudes.filter(s => 
                s.tipoServicio === 'MANTENIMIENTO_CORRECTIVO' || 
                s.tipoServicio === 'Mantenimiento Correctivo'
            ).length;
            const porcentajeCorrectivos = totalSolicitudes > 0 
                ? ((mantenimientosCorrectivos / totalSolicitudes) * 100).toFixed(2) 
                : 0;
            
            // 3. PORCENTAJE DE ERRORES DE USUARIO
            const erroresUsuario = solicitudes.filter(s => 
                s.tipoServicio === 'ERROR_USUARIO' || 
                s.tipoServicio === 'Error de Usuario' ||
                (s.observaciones && s.observaciones.toLowerCase().includes('error de usuario')) ||
                (s.descripcion && s.descripcion.toLowerCase().includes('error de usuario'))
            ).length;
            const porcentajeErroresUsuario = totalSolicitudes > 0 
                ? ((erroresUsuario / totalSolicitudes) * 100).toFixed(2) 
                : 0;
            
            // 4. TIEMPO DE RESPUESTA DE CADA SOLICITUD
            const tiemposRespuesta = [];
            let totalTiempoRespuestaMs = 0;
            let solicitudesConTiempo = 0;
            
            solicitudes.forEach(solicitud => {
                const tiempoRespuesta = this.calculateResponseTime(solicitud);
                if (tiempoRespuesta) {
                    tiemposRespuesta.push({
                        numero: solicitud.numero,
                        estado: solicitud.estado,
                        tiempoFormato: tiempoRespuesta.formato,
                        horas: tiempoRespuesta.horas,
                        minutos: tiempoRespuesta.minutos,
                        diasDecimales: tiempoRespuesta.diasDecimales
                    });
                    
                    // Solo contar solicitudes completadas o canceladas para el promedio
                    if (solicitud.estado === 'COMPLETADA' || solicitud.estado === 'Completada' || 
                        solicitud.estado === 'CANCELADA' || solicitud.estado === 'Cancelada') {
                        totalTiempoRespuestaMs += tiempoRespuesta.totalMs;
                        solicitudesConTiempo++;
                    }
                }
            });
            
            // Calcular promedio de tiempo de respuesta
            const promedioTiempoRespuestaMs = solicitudesConTiempo > 0 
                ? totalTiempoRespuestaMs / solicitudesConTiempo 
                : 0;
            const promedioHoras = Math.floor(promedioTiempoRespuestaMs / (1000 * 60 * 60));
            const promedioMinutos = Math.floor((promedioTiempoRespuestaMs % (1000 * 60 * 60)) / (1000 * 60));
            
            // Ordenar tiempos de respuesta por duraci√≥n (mayor a menor)
            tiemposRespuesta.sort((a, b) => b.horas - a.horas);
            
            // Estad√≠sticas por tipo de servicio (incluyendo DESINSTALACION)
            const estadisticasPorTipo = {};
            this.validSolicitudValues.tipoServicio.forEach(tipo => {
                const solicitudesTipo = solicitudes.filter(s => s.tipoServicio === tipo);
                estadisticasPorTipo[tipo] = {
                    total: solicitudesTipo.length,
                    completadas: solicitudesTipo.filter(s => s.estado === 'COMPLETADA' || s.estado === 'Completada').length,
                    porcentaje: totalSolicitudes > 0 ? ((solicitudesTipo.length / totalSolicitudes) * 100).toFixed(2) : 0
                };
            });
            
            return {
                solicitudes: {
                    total: totalSolicitudes,
                    pendientes: pendientes,
                    asignadas: asignadas,
                    enProceso: enProceso,
                    completadas: completadas,
                    canceladas: canceladas,
                    porArea: {
                        INGENIERIA_BIOMEDICA: solicitudes.filter(s => {
                            const area = s.servicioIngenieria || '';
                            return area === 'INGENIERIA_BIOMEDICA' || 
                                   area === 'Ingenier√≠a Biom√©dica' ||
                                   area.toLowerCase().includes('biomed') || 
                                   area.toLowerCase().includes('biom√©d');
                        }).length,
                        MECANICA: solicitudes.filter(s => {
                            const area = s.servicioIngenieria || '';
                            return area === 'MECANICA' || 
                                   area === 'Mec√°nica' ||
                                   area.toLowerCase().includes('mec');
                        }).length,
                        INFRAESTRUCTURA: solicitudes.filter(s => {
                            const area = s.servicioIngenieria || '';
                            return area === 'INFRAESTRUCTURA' || 
                                   area === 'Infraestructura' ||
                                   area.toLowerCase().includes('infra');
                        }).length
                    },
                    porPrioridad: {
                        CRITICA: solicitudes.filter(s => s.prioridad === 'CRITICA' || s.prioridad === 'Cr√≠tica').length,
                        ALTA: solicitudes.filter(s => s.prioridad === 'ALTA' || s.prioridad === 'Alta').length,
                        MEDIA: solicitudes.filter(s => s.prioridad === 'MEDIA' || s.prioridad === 'Media').length,
                        BAJA: solicitudes.filter(s => s.prioridad === 'BAJA' || s.prioridad === 'Baja').length
                    }
                },
                tecnicos: {
                    total: tecnicos.length,
                    disponibles: tecnicos.filter(t => t.estado === 'disponible').length,
                    ocupados: tecnicos.filter(t => t.estado === 'ocupado').length,
                    inactivos: tecnicos.filter(t => t.estado === 'inactivo').length
                },
                usuarios: {
                    total: usuarios.length,
                    activos: usuarios.filter(u => u.estado === 'ACTIVO' || u.estado === 'Activo').length
                },
                tiemposRespuesta: {
                    promedioRespuesta: `${promedioHoras}h ${promedioMinutos}m`,
                    solicitudesVencidas: solicitudes.filter(s => {
                        if (!s.tiempoRespuestaMaximo || 
                            s.estado === 'COMPLETADA' || s.estado === 'Completada' ||
                            s.estado === 'CANCELADA' || s.estado === 'Cancelada') return false;
                        return new Date() > new Date(s.tiempoRespuestaMaximo);
                    }).length,
                    detalleTiempos: tiemposRespuesta.slice(0, 10), // Top 10 tiempos m√°s largos
                    totalConTiempoRegistrado: solicitudesConTiempo
                },
                // NUEVOS INDICADORES
                indicadoresGestion: {
                    porcentajeCompletadas: parseFloat(porcentajeCompletadas),
                    porcentajeMantenimientosCorrectivos: parseFloat(porcentajeCorrectivos),
                    porcentajeErroresUsuario: parseFloat(porcentajeErroresUsuario),
                    efectividad: {
                        solicitudesGestionadas: completadas + canceladas,
                        porcentajeGestion: totalSolicitudes > 0 
                            ? (((completadas + canceladas) / totalSolicitudes) * 100).toFixed(2)
                            : 0
                    }
                },
                estadisticasPorTipo: estadisticasPorTipo,
                timestamp: new Date().toISOString()
            };
            
        } catch (error) {
            console.error('‚ùå Error obteniendo estad√≠sticas:', error);
            throw error;
        }
    }

    async testTecnicosTable() {
        console.log('üß™ Test espec√≠fico de tabla Tecnicos...');
        
        try {
            const result = await this.makeRequest(`${this.tables.tecnicos}?maxRecords=3`);
            
            return {
                success: true,
                records: result.records ? result.records.length : 0,
                sampleData: result.records ? result.records[0] : null
            };
            
        } catch (error) {
            console.error('‚ùå Test de Tecnicos fall√≥:', error);
            
            return {
                success: false,
                error: error.message,
                status: error.message.includes('HTTP') ? error.message.match(/HTTP (\d+)/)?.[1] : null
            };
        }
    }

    async testSolicitudesAccesoTable() {
        console.log('üß™ Test espec√≠fico de tabla SolicitudesAcceso...');
        
        try {
            const result = await this.makeRequest(`${this.tables.solicitudesAcceso}?maxRecords=3`);
            
            console.log('‚úÖ Test SolicitudesAcceso exitoso');
            console.log('üìä Registros encontrados:', result.records ? result.records.length : 0);
            
            if (result.records && result.records.length > 0) {
                console.log('üîç Campos disponibles:', Object.keys(result.records[0].fields));
                console.log('üìã Muestra de datos:', result.records[0]);
            }
            
            return {
                success: true,
                records: result.records ? result.records.length : 0,
                availableFields: result.records && result.records.length > 0 ? Object.keys(result.records[0].fields) : [],
                sampleData: result.records ? result.records[0] : null
            };
            
        } catch (error) {
            console.error('‚ùå Test de SolicitudesAcceso fall√≥:', error);
            
            return {
                success: false,
                error: error.message,
                status: error.message.includes('HTTP') ? error.message.match(/HTTP (\d+)/)?.[1] : null
            };
        }
    }

    // üîß NUEVO: M√©todo de diagn√≥stico para valores de solicitudes
    async diagnosticSolicitudValues() {
        console.log('üîç DIAGN√ìSTICO COMPLETO DE VALORES DE SOLICITUDES');
        console.log('==============================================');
        
        try {
            // 1. Mostrar valores actuales
            console.log('\nüìã VALORES ACTUALES:');
            console.log('Servicios de Ingenier√≠a:', this.validSolicitudValues.servicioIngenieria);
            console.log('Tipos de Servicio:', this.validSolicitudValues.tipoServicio);
            console.log('Prioridades:', this.validSolicitudValues.prioridad);
            console.log('Estados:', this.validSolicitudValues.estado);
            
            // 2. Intentar detectar valores
            console.log('\nüîç DETECTANDO VALORES EN AIRTABLE...');
            await this.detectValidSolicitudValues();
            
            // 3. Probar creaci√≥n con cada √°rea
            console.log('\nüß™ PROBANDO CREACI√ìN CON CADA √ÅREA:');
            const areas = ['INGENIERIA_BIOMEDICA', 'MECANICA', 'INFRAESTRUCTURA'];
            const resultados = {};
            
            for (const area of areas) {
                try {
                    // Aplicar mapeo
                    const areaMapeada = this.mapFieldValue('servicioIngenieria', area);
                    console.log(`\nProbando ${area} ‚Üí ${areaMapeada}`);
                    
                    const testData = {
                        fields: {
                            numero: 'TEST_' + Date.now(),
                            descripcion: 'Test de √°rea',
                            servicioIngenieria: areaMapeada,
                            fechaCreacion: new Date().toISOString(),
                            estado: 'Pendiente'
                        }
                    };
                    
                    const result = await this.makeRequest(this.tables.solicitudes, 'POST', testData);
                    
                    if (result && result.id) {
                        console.log(`‚úÖ ${area} ‚Üí ${areaMapeada} - V√ÅLIDO`);
                        resultados[area] = { 
                            valido: true, 
                            valorMapeado: areaMapeada,
                            valorGuardado: result.fields?.servicioIngenieria 
                        };
                        
                        // Eliminar registro de prueba
                        try {
                            await this.makeRequest(`${this.tables.solicitudes}/${result.id}`, 'DELETE');
                        } catch (deleteError) {
                            console.warn('‚ö†Ô∏è No se pudo eliminar registro de prueba');
                        }
                    }
                    
                } catch (error) {
                    console.log(`‚ùå ${area} - INV√ÅLIDO: ${error.message}`);
                    resultados[area] = { valido: false, error: error.message };
                }
            }
            
            // 4. Probar DESINSTALACION
            console.log('\nüß™ PROBANDO TIPO DE SERVICIO DESINSTALACION:');
            try {
                const testData = {
                    fields: {
                        numero: 'TEST_DESINST_' + Date.now(),
                        descripcion: 'Test de desinstalaci√≥n',
                        servicioIngenieria: 'MECANICA',
                        tipoServicio: 'DESINSTALACION',
                        fechaCreacion: new Date().toISOString(),
                        estado: 'Pendiente'
                    }
                };
                
                const result = await this.makeRequest(this.tables.solicitudes, 'POST', testData);
                
                if (result && result.id) {
                    console.log(`‚úÖ DESINSTALACION - V√ÅLIDO`);
                    
                    // Eliminar registro de prueba
                    try {
                        await this.makeRequest(`${this.tables.solicitudes}/${result.id}`, 'DELETE');
                    } catch (deleteError) {
                        console.warn('‚ö†Ô∏è No se pudo eliminar registro de prueba');
                    }
                } else {
                    console.log(`‚ùå DESINSTALACION - No se pudo crear`);
                }
            } catch (error) {
                console.log(`‚ùå DESINSTALACION - INV√ÅLIDO: ${error.message}`);
            }
            
            return {
                valoresActuales: this.validSolicitudValues,
                mapeoConfigurado: this.fieldMappings.servicioIngenieria,
                tipoServicioMapeo: this.fieldMappings.tipoServicio,
                resultadosPruebas: resultados,
                recomendaciones: [
                    'Verificar que los valores en Airtable coincidan con el mapeo',
                    'Usar los valores mapeados al crear solicitudes',
                    'Si persiste el error, verificar permisos del campo en Airtable',
                    'DESINSTALACION ya est√° agregado al mapeo y valores v√°lidos'
                ]
            };
            
        } catch (error) {
            console.error('‚ùå Error en diagn√≥stico:', error);
            return { error: error.message };
        }
    }

    // üîß NUEVO: M√©todo de diagn√≥stico para cambios de estado
    async diagnosticEstadoChange(solicitudId) {
        console.log('üîç DIAGN√ìSTICO DE CAMBIO DE ESTADO');
        console.log('===================================');
        
        try {
            const solicitudes = await this.getSolicitudes();
            const solicitud = solicitudes.find(s => s.id === solicitudId);
            
            if (!solicitud) {
                return { error: 'Solicitud no encontrada' };
            }
            
            console.log('\nüìã SOLICITUD ACTUAL:');
            console.log('ID:', solicitud.id);
            console.log('N√∫mero:', solicitud.numero);
            console.log('Estado actual:', solicitud.estado);
            console.log('T√©cnico asignado:', solicitud.tecnicoAsignado);
            
            console.log('\nüß™ PROBANDO CAMBIOS DE ESTADO:');
            const estadosPrueba = ['EN_PROCESO', 'COMPLETADA'];
            const resultados = {};
            
            for (const nuevoEstado of estadosPrueba) {
                console.log(`\nProbando cambio a: ${nuevoEstado}`);
                
                try {
                    // Intentar con el valor mapeado
                    const estadoMapeado = this.mapFieldValue('estado', nuevoEstado);
                    console.log(`Estado mapeado: ${estadoMapeado}`);
                    
                    // Simular la actualizaci√≥n sin ejecutarla
                    const updateData = {
                        estado: estadoMapeado
                    };
                    
                    if (nuevoEstado === 'EN_PROCESO') {
                        updateData.fechaInicioTrabajo = new Date().toISOString();
                    } else if (nuevoEstado === 'COMPLETADA') {
                        updateData.fechaCompletado = new Date().toISOString();
                    }
                    
                    console.log('Datos que se enviar√≠an:', updateData);
                    
                    // Verificar si el valor est√° en la lista de valores v√°lidos
                    if (this.validSolicitudValues.estado.includes(estadoMapeado)) {
                        resultados[nuevoEstado] = {
                            valido: true,
                            valorMapeado: estadoMapeado,
                            mensaje: 'El valor est√° en la lista de valores v√°lidos'
                        };
                    } else {
                        resultados[nuevoEstado] = {
                            valido: false,
                            valorMapeado: estadoMapeado,
                            mensaje: 'El valor NO est√° en la lista de valores v√°lidos',
                            valoresValidos: this.validSolicitudValues.estado
                        };
                    }
                    
                } catch (error) {
                    resultados[nuevoEstado] = {
                        error: error.message
                    };
                }
            }
            
            return {
                solicitud: {
                    id: solicitud.id,
                    numero: solicitud.numero,
                    estadoActual: solicitud.estado,
                    tecnicoAsignado: solicitud.tecnicoAsignado
                },
                valoresValidosDetectados: this.validSolicitudValues.estado,
                resultadosPruebas: resultados,
                recomendaciones: [
                    'Verificar que los valores de estado en Airtable coincidan con el mapeo',
                    'Revisar la configuraci√≥n del campo "estado" en Airtable',
                    'Si usa valores personalizados, agregarlos al mapeo en AIRTABLE_VALUE_MAPPING'
                ]
            };
            
        } catch (error) {
            console.error('‚ùå Error en diagn√≥stico:', error);
            return { error: error.message };
        }
    }

    getStatus() {
        return {
            isConnected: this.connectionStatus === 'connected',
            useProxy: this.useProxy,
            environment: this.isLocalDevelopment ? 'development' : 'production',
            hostname: this.hostname,
            baseUrl: this.baseUrl,
            tables: this.tables,
            timestamp: new Date().toISOString(),
            version: '9.2-desinstalacion-agregado',
            validAccessRequestValues: this.validAccessRequestValues,
            validUserValues: this.validUserValues,
            validSolicitudValues: this.validSolicitudValues,
            features: [
                'NUEVO: Tipo de servicio DESINSTALACION agregado',
                'FIX: Cambio de estado mejorado con m√∫ltiples intentos',
                'FIX: Liberaci√≥n de t√©cnico al completar solicitud',
                'NUEVO: Diagn√≥stico espec√≠fico para cambios de estado',
                'NUEVO: Indicadores avanzados de gesti√≥n',
                'NUEVO: Porcentaje de solicitudes completadas',
                'NUEVO: Porcentaje de mantenimientos correctivos',
                'NUEVO: Porcentaje de errores de usuario',
                'NUEVO: C√°lculo de tiempos de respuesta detallados',
                'FIX: Detecci√≥n robusta de valores para todas las tablas',
                'FIX: Mejor manejo de errores 422 con mensajes espec√≠ficos',
                'Sistema completo funcionando con valores mapeados e indicadores'
            ]
        };
    }
}

// üåç Crear instancia global
try {
    console.log('üîß Creando instancia global con indicadores avanzados...');
    window.airtableAPI = new AirtableAPI();
    console.log('‚úÖ window.airtableAPI creado exitosamente (versi√≥n con DESINSTALACION)');
} catch (error) {
    console.error('‚ùå Error creando airtableAPI:', error);
}

// üì° Event listeners
try {
    window.addEventListener('airtableConnectionUpdate', function(event) {
        console.log('üîÑ Estado actualizado:', event.detail);
        
        if (typeof updateConnectionStatus === 'function') {
            const status = event.detail.connected ? 'connected' : 'disconnected';
            const message = event.detail.connected 
                ? '‚úÖ Conectado (con DESINSTALACION)' 
                : 'Modo Local (con DESINSTALACION)';
            
            updateConnectionStatus(status, message);
        }
    });
} catch (error) {
    console.warn('‚ö†Ô∏è No se pudo configurar event listener:', error);
}

// üõ†Ô∏è Funci√≥n de diagn√≥stico actualizada
try {
    window.debugAirtableConnection = function() {
        if (!window.airtableAPI) {
            console.error('‚ùå window.airtableAPI no est√° disponible');
            return { error: 'airtableAPI no disponible' };
        }
        
        const status = window.airtableAPI.getStatus();
        
        console.log('üîç DIAGN√ìSTICO INDICADORES AVANZADOS');
        console.log('==================================');
        console.log('üåê Hostname:', status.hostname);
        console.log('üè† Entorno:', status.environment);
        console.log('üõ°Ô∏è Proxy:', status.useProxy ? 'HABILITADO' : 'DESHABILITADO');
        console.log('üì° URL base:', status.baseUrl);
        console.log('üîç Estado:', status.isConnected ? '‚úÖ CONECTADO' : '‚ùå DESCONECTADO');
        console.log('üìã Versi√≥n:', status.version);
        console.log('üîê Valores de solicitudes de acceso:', status.validAccessRequestValues);
        console.log('üë§ Valores de usuarios:', status.validUserValues);
        console.log('üìã Valores de solicitudes:', status.validSolicitudValues);
        console.log('‚ú® NUEVO: Tipo de servicio DESINSTALACION incluido');
        console.log('üìä Nuevas caracter√≠sticas:', status.features.filter(f => f.startsWith('NUEVO') || f.startsWith('FIX')));
        
        return status;
    };
    
    // Funci√≥n para debug espec√≠fico de solicitudes de acceso
    window.debugAccessRequests = async function() {
        if (!window.airtableAPI) {
            console.error('‚ùå window.airtableAPI no est√° disponible');
            return { error: 'airtableAPI no disponible' };
        }
        
        return await window.airtableAPI.detectValidAccessRequestValues();
    };
    
    // Funci√≥n para diagn√≥stico completo de solicitudes
    window.debugSolicitudValues = async function() {
        if (!window.airtableAPI) {
            console.error('‚ùå window.airtableAPI no est√° disponible');
            return { error: 'airtableAPI no disponible' };
        }
        
        return await window.airtableAPI.diagnosticSolicitudValues();
    };
    
    // NUEVA: Funci√≥n para diagn√≥stico de cambio de estado
    window.debugEstadoChange = async function(solicitudId) {
        if (!window.airtableAPI) {
            console.error('‚ùå window.airtableAPI no est√° disponible');
            return { error: 'airtableAPI no disponible' };
        }
        
        if (!solicitudId) {
            console.error('‚ùå Debe proporcionar un ID de solicitud');
            return { error: 'ID de solicitud requerido' };
        }
        
        return await window.airtableAPI.diagnosticEstadoChange(solicitudId);
    };
    
    // Funci√≥n para ver estad√≠sticas avanzadas
    window.debugAdvancedStats = async function() {
        if (!window.airtableAPI) {
            console.error('‚ùå window.airtableAPI no est√° disponible');
            return { error: 'airtableAPI no disponible' };
        }
        
        console.log('üìä Obteniendo estad√≠sticas avanzadas...');
        const stats = await window.airtableAPI.getAdvancedStatistics();
        
        console.log('üìä ESTAD√çSTICAS AVANZADAS');
        console.log('========================');
        console.log('üìà Indicadores de Gesti√≥n:');
        console.log(`  ‚Ä¢ Completadas: ${stats.indicadoresGestion.porcentajeCompletadas}%`);
        console.log(`  ‚Ä¢ Mantenimientos Correctivos: ${stats.indicadoresGestion.porcentajeMantenimientosCorrectivos}%`);
        console.log(`  ‚Ä¢ Errores de Usuario: ${stats.indicadoresGestion.porcentajeErroresUsuario}%`);
        console.log(`  ‚Ä¢ Efectividad Total: ${stats.indicadoresGestion.efectividad.porcentajeGestion}%`);
        console.log('\n‚è±Ô∏è Tiempos de Respuesta:');
        console.log(`  ‚Ä¢ Promedio: ${stats.tiemposRespuesta.promedioRespuesta}`);
        console.log(`  ‚Ä¢ Vencidas: ${stats.tiemposRespuesta.solicitudesVencidas}`);
        console.log('\nüìã Por Tipo de Servicio:');
        Object.entries(stats.estadisticasPorTipo).forEach(([tipo, data]) => {
            console.log(`  ‚Ä¢ ${tipo}: ${data.total} (${data.porcentaje}%)`);
        });
        
        return stats;
    };
    
    console.log('‚úÖ Funciones de debug creadas exitosamente');
} catch (error) {
    console.error('‚ùå Error creando funciones de debug:', error);
}

console.log('‚úÖ airtable-config.js (CON DESINSTALACION) cargado');
console.log('‚ú® NUEVO: Tipo de servicio DESINSTALACION agregado');
console.log('üîÑ FIX: Cambio de estado con m√∫ltiples intentos');
console.log('üîì FIX: Liberaci√≥n de t√©cnico al completar');
console.log('üß™ NUEVO: Para diagnosticar cambio de estado: debugEstadoChange("ID_SOLICITUD")');
console.log('üìä Para estad√≠sticas avanzadas: debugAdvancedStats()');
console.log('üîç Para diagn√≥stico completo: debugSolicitudValues()');
console.log('üõ†Ô∏è Para estado general: debugAirtableConnection()');

// Auto-verificaci√≥n despu√©s de la carga
setTimeout(async () => {
    if (window.airtableAPI) {
        console.log('üîÑ Iniciando detecci√≥n autom√°tica de valores v√°lidos...');
        
        try {
            // Siempre detectar valores de acceso y usuarios
            await window.airtableAPI.detectValidAccessRequestValues();
            await window.airtableAPI.detectValidUserValues();
            
            // Intentar detectar valores de solicitudes, pero no fallar si no hay registros
            try {
                await window.airtableAPI.detectValidSolicitudValues();
            } catch (error) {
                console.log('üìã Usando valores por defecto para solicitudes');
            }
            
            const solicitudValues = window.airtableAPI.validSolicitudValues;
            
            console.log('‚úÖ Detecci√≥n completada');
            console.log('üìã Valores de solicitudes disponibles:', {
                √°reas: solicitudValues.servicioIngenieria,
                tipos: solicitudValues.tipoServicio.length,
                prioridades: solicitudValues.prioridad.length,
                estados: solicitudValues.estado.length
            });
            console.log('‚ú® Verificando DESINSTALACION en tipos:', 
                solicitudValues.tipoServicio.includes('DESINSTALACION') ? '‚úÖ Incluido' : '‚ùå No incluido');
            console.log('üìä Sistema listo con cambio de estado mejorado y DESINSTALACION');
            
        } catch (error) {
            console.error('‚ùå Error en detecci√≥n autom√°tica:', error);
        }
    }
}, 3000);